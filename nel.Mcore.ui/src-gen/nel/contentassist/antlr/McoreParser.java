/*
* generated by Xtext
*/
package nel.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import nel.services.McoreGrammarAccess;

public class McoreParser extends AbstractContentAssistParser {
	
	@Inject
	private McoreGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected nel.contentassist.antlr.internal.InternalMcoreLexer createLexer(CharStream stream) {
		return new nel.contentassist.antlr.internal.InternalMcoreLexer(stream);
	}
	
	@Override
	protected nel.contentassist.antlr.internal.InternalMcoreParser createParser() {
		nel.contentassist.antlr.internal.InternalMcoreParser result = new nel.contentassist.antlr.internal.InternalMcoreParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getBehaviorAccess().getAlternatives_2_0(), "rule__Behavior__Alternatives_2_0");
					put(grammarAccess.getRExpAccess().getAlternatives(), "rule__RExp__Alternatives");
					put(grammarAccess.getREGSARGSAccess().getAlternatives(), "rule__REGSARGS__Alternatives");
					put(grammarAccess.getJMPTARGETAccess().getAlternatives(), "rule__JMPTARGET__Alternatives");
					put(grammarAccess.getARGSAccess().getAlternatives(), "rule__ARGS__Alternatives");
					put(grammarAccess.getAOPsAccess().getAlternatives(), "rule__AOPs__Alternatives");
					put(grammarAccess.getCMPOPsAccess().getAlternatives(), "rule__CMPOPs__Alternatives");
					put(grammarAccess.getInstTypeLabelAccess().getAlternatives(), "rule__InstTypeLabel__Alternatives");
					put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
					put(grammarAccess.getInstTypeAccess().getGroup(), "rule__InstType__Group__0");
					put(grammarAccess.getCodingAccess().getGroup(), "rule__Coding__Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup(), "rule__Behavior__Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup_2(), "rule__Behavior__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getRExpAccess().getGroup_1(), "rule__RExp__Group_1__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getREGSAccess().getGroup(), "rule__REGS__Group__0");
					put(grammarAccess.getModelAccess().getInstructionsAssignment(), "rule__Model__InstructionsAssignment");
					put(grammarAccess.getInstructionAccess().getNameAssignment_1(), "rule__Instruction__NameAssignment_1");
					put(grammarAccess.getInstructionAccess().getTypeAssignment_3(), "rule__Instruction__TypeAssignment_3");
					put(grammarAccess.getInstructionAccess().getCodingAssignment_4(), "rule__Instruction__CodingAssignment_4");
					put(grammarAccess.getInstructionAccess().getBehaviorAssignment_5(), "rule__Instruction__BehaviorAssignment_5");
					put(grammarAccess.getInstTypeAccess().getTypeAssignment_1(), "rule__InstType__TypeAssignment_1");
					put(grammarAccess.getCodingAccess().getCodingAssignment_1(), "rule__Coding__CodingAssignment_1");
					put(grammarAccess.getBehaviorAccess().getExpressionsAssignment_2_0_0(), "rule__Behavior__ExpressionsAssignment_2_0_0");
					put(grammarAccess.getBehaviorAccess().getConditionsAssignment_2_0_1(), "rule__Behavior__ConditionsAssignment_2_0_1");
					put(grammarAccess.getExpressionAccess().getLexpAssignment_0(), "rule__Expression__LexpAssignment_0");
					put(grammarAccess.getExpressionAccess().getRexpAssignment_2(), "rule__Expression__RexpAssignment_2");
					put(grammarAccess.getLExpAccess().getRegAssignment(), "rule__LExp__RegAssignment");
					put(grammarAccess.getRExpAccess().getArgAssignment_0(), "rule__RExp__ArgAssignment_0");
					put(grammarAccess.getRExpAccess().getLargAssignment_1_0(), "rule__RExp__LargAssignment_1_0");
					put(grammarAccess.getRExpAccess().getAopAssignment_1_1(), "rule__RExp__AopAssignment_1_1");
					put(grammarAccess.getRExpAccess().getRargAssignment_1_2(), "rule__RExp__RargAssignment_1_2");
					put(grammarAccess.getConditionAccess().getLargAssignment_2(), "rule__Condition__LargAssignment_2");
					put(grammarAccess.getConditionAccess().getCmpopAssignment_3(), "rule__Condition__CmpopAssignment_3");
					put(grammarAccess.getConditionAccess().getRargAssignment_4(), "rule__Condition__RargAssignment_4");
					put(grammarAccess.getConditionAccess().getThentargetAssignment_6(), "rule__Condition__ThentargetAssignment_6");
					put(grammarAccess.getConditionAccess().getElsetargetAssignment_8(), "rule__Condition__ElsetargetAssignment_8");
					put(grammarAccess.getREGSARGSAccess().getRegAssignment_0(), "rule__REGSARGS__RegAssignment_0");
					put(grammarAccess.getREGSARGSAccess().getArgAssignment_1(), "rule__REGSARGS__ArgAssignment_1");
					put(grammarAccess.getREGSAccess().getArgAssignment_2(), "rule__REGS__ArgAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			nel.contentassist.antlr.internal.InternalMcoreParser typedParser = (nel.contentassist.antlr.internal.InternalMcoreParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public McoreGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(McoreGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
