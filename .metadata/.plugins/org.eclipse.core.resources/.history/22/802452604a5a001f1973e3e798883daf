/*
* generated by Xtext
*/
package jp.kyushu_u.ait.f.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import jp.kyushu_u.ait.f.services.ISSDSLGrammarAccess;

public class ISSDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private ISSDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected jp.kyushu_u.ait.f.contentassist.antlr.internal.InternalISSDSLLexer createLexer(CharStream stream) {
		return new jp.kyushu_u.ait.f.contentassist.antlr.internal.InternalISSDSLLexer(stream);
	}
	
	@Override
	protected jp.kyushu_u.ait.f.contentassist.antlr.internal.InternalISSDSLParser createParser() {
		jp.kyushu_u.ait.f.contentassist.antlr.internal.InternalISSDSLParser result = new jp.kyushu_u.ait.f.contentassist.antlr.internal.InternalISSDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getBehaviorAccess().getAlternatives_2_0(), "rule__Behavior__Alternatives_2_0");
					put(grammarAccess.getREGSARGSAccess().getAlternatives(), "rule__REGSARGS__Alternatives");
					put(grammarAccess.getJMPTARGETAccess().getAlternatives(), "rule__JMPTARGET__Alternatives");
					put(grammarAccess.getREGSAccess().getAlternatives(), "rule__REGS__Alternatives");
					put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
					put(grammarAccess.getInstTypeAccess().getGroup(), "rule__InstType__Group__0");
					put(grammarAccess.getCodingAccess().getGroup(), "rule__Coding__Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup(), "rule__Behavior__Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup_2(), "rule__Behavior__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getRExpAccess().getGroup(), "rule__RExp__Group__0");
					put(grammarAccess.getRExpAccess().getGroup_1(), "rule__RExp__Group_1__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getREGSAccess().getGroup_0(), "rule__REGS__Group_0__0");
					put(grammarAccess.getModelAccess().getInstructionsAssignment(), "rule__Model__InstructionsAssignment");
					put(grammarAccess.getInstructionAccess().getNameAssignment_1(), "rule__Instruction__NameAssignment_1");
					put(grammarAccess.getInstructionAccess().getTypeAssignment_3(), "rule__Instruction__TypeAssignment_3");
					put(grammarAccess.getInstructionAccess().getCodingAssignment_4(), "rule__Instruction__CodingAssignment_4");
					put(grammarAccess.getInstructionAccess().getBehaviorAssignment_5(), "rule__Instruction__BehaviorAssignment_5");
					put(grammarAccess.getCodingAccess().getBinaryAssignment_1(), "rule__Coding__BinaryAssignment_1");
					put(grammarAccess.getBehaviorAccess().getExpressionsAssignment_2_0_0(), "rule__Behavior__ExpressionsAssignment_2_0_0");
					put(grammarAccess.getBehaviorAccess().getConditionsAssignment_2_0_1(), "rule__Behavior__ConditionsAssignment_2_0_1");
					put(grammarAccess.getExpressionAccess().getLexpAssignment_0(), "rule__Expression__LexpAssignment_0");
					put(grammarAccess.getExpressionAccess().getRexpAssignment_2(), "rule__Expression__RexpAssignment_2");
					put(grammarAccess.getRExpAccess().getArgsAssignment_0(), "rule__RExp__ArgsAssignment_0");
					put(grammarAccess.getRExpAccess().getAopsAssignment_1_0(), "rule__RExp__AopsAssignment_1_0");
					put(grammarAccess.getRExpAccess().getArgsAssignment_1_1(), "rule__RExp__ArgsAssignment_1_1");
					put(grammarAccess.getConditionAccess().getLargAssignment_2(), "rule__Condition__LargAssignment_2");
					put(grammarAccess.getConditionAccess().getCmpopAssignment_3(), "rule__Condition__CmpopAssignment_3");
					put(grammarAccess.getConditionAccess().getRargAssignment_4(), "rule__Condition__RargAssignment_4");
					put(grammarAccess.getConditionAccess().getThentargetAssignment_6(), "rule__Condition__ThentargetAssignment_6");
					put(grammarAccess.getConditionAccess().getElsetargetAssignment_8(), "rule__Condition__ElsetargetAssignment_8");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			jp.kyushu_u.ait.f.contentassist.antlr.internal.InternalISSDSLParser typedParser = (jp.kyushu_u.ait.f.contentassist.antlr.internal.InternalISSDSLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ISSDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ISSDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
