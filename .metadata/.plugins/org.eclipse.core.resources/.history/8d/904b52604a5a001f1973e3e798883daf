/*
* generated by Xtext
*/
grammar InternalISSDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package jp.kyushu_u.ait.f.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package jp.kyushu_u.ait.f.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import jp.kyushu_u.ait.f.services.ISSDSLGrammarAccess;

}

@parser::members {
 
 	private ISSDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ISSDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel :
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getModelAccess().getInstructionsAssignment()); }
(rule__Model__InstructionsAssignment)*
{ after(grammarAccess.getModelAccess().getInstructionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction :
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getInstructionAccess().getGroup()); }
(rule__Instruction__Group__0)
{ after(grammarAccess.getInstructionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstType
entryRuleInstType :
{ before(grammarAccess.getInstTypeRule()); }
	 ruleInstType
{ after(grammarAccess.getInstTypeRule()); } 
	 EOF 
;

// Rule InstType
ruleInstType 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getInstTypeAccess().getGroup()); }
(rule__InstType__Group__0)
{ after(grammarAccess.getInstTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCoding
entryRuleCoding :
{ before(grammarAccess.getCodingRule()); }
	 ruleCoding
{ after(grammarAccess.getCodingRule()); } 
	 EOF 
;

// Rule Coding
ruleCoding 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getCodingAccess().getGroup()); }
(rule__Coding__Group__0)
{ after(grammarAccess.getCodingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBehavior
entryRuleBehavior :
{ before(grammarAccess.getBehaviorRule()); }
	 ruleBehavior
{ after(grammarAccess.getBehaviorRule()); } 
	 EOF 
;

// Rule Behavior
ruleBehavior 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBehaviorAccess().getGroup()); }
(rule__Behavior__Group__0)
{ after(grammarAccess.getBehaviorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression :
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLExp
entryRuleLExp :
{ before(grammarAccess.getLExpRule()); }
	 ruleLExp
{ after(grammarAccess.getLExpRule()); } 
	 EOF 
;

// Rule LExp
ruleLExp 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getLExpAccess().getREGSParserRuleCall()); }
	ruleREGS
{ after(grammarAccess.getLExpAccess().getREGSParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRExp
entryRuleRExp :
{ before(grammarAccess.getRExpRule()); }
	 ruleRExp
{ after(grammarAccess.getRExpRule()); } 
	 EOF 
;

// Rule RExp
ruleRExp 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getRExpAccess().getGroup()); }
(rule__RExp__Group__0)
{ after(grammarAccess.getRExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition :
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleREGSARGS
entryRuleREGSARGS :
{ before(grammarAccess.getREGSARGSRule()); }
	 ruleREGSARGS
{ after(grammarAccess.getREGSARGSRule()); } 
	 EOF 
;

// Rule REGSARGS
ruleREGSARGS 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getREGSARGSAccess().getAlternatives()); }
(rule__REGSARGS__Alternatives)
{ after(grammarAccess.getREGSARGSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJMPTARGET
entryRuleJMPTARGET :
{ before(grammarAccess.getJMPTARGETRule()); }
	 ruleJMPTARGET
{ after(grammarAccess.getJMPTARGETRule()); } 
	 EOF 
;

// Rule JMPTARGET
ruleJMPTARGET 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getJMPTARGETAccess().getAlternatives()); }
(rule__JMPTARGET__Alternatives)
{ after(grammarAccess.getJMPTARGETAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleREGS
entryRuleREGS :
{ before(grammarAccess.getREGSRule()); }
	 ruleREGS
{ after(grammarAccess.getREGSRule()); } 
	 EOF 
;

// Rule REGS
ruleREGS 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getREGSAccess().getAlternatives()); }
(rule__REGS__Alternatives)
{ after(grammarAccess.getREGSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Behavior__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getExpressionsAssignment_2_0_0()); }
(rule__Behavior__ExpressionsAssignment_2_0_0)
{ after(grammarAccess.getBehaviorAccess().getExpressionsAssignment_2_0_0()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getConditionsAssignment_2_0_1()); }
(rule__Behavior__ConditionsAssignment_2_0_1)
{ after(grammarAccess.getBehaviorAccess().getConditionsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REGSARGS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREGSARGSAccess().getREGSParserRuleCall_0()); }
	ruleREGS
{ after(grammarAccess.getREGSARGSAccess().getREGSParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getREGSARGSAccess().getARGSTerminalRuleCall_1()); }
	RULE_ARGS
{ after(grammarAccess.getREGSARGSAccess().getARGSTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JMPTARGET__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJMPTARGETAccess().getREGSARGSParserRuleCall_0()); }
	ruleREGSARGS
{ after(grammarAccess.getJMPTARGETAccess().getREGSARGSParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getJMPTARGETAccess().getNextKeyword_1()); }

	'next' 

{ after(grammarAccess.getJMPTARGETAccess().getNextKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REGS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREGSAccess().getGroup_0()); }
(rule__REGS__Group_0__0)
{ after(grammarAccess.getREGSAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getREGSAccess().getPcKeyword_1()); }

	'pc' 

{ after(grammarAccess.getREGSAccess().getPcKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Instruction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getInstructionKeyword_0()); }

	'instruction' 

{ after(grammarAccess.getInstructionAccess().getInstructionKeyword_0()); }
)

	rule__Instruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getNameAssignment_1()); }
(rule__Instruction__NameAssignment_1)
{ after(grammarAccess.getInstructionAccess().getNameAssignment_1()); }
)

	rule__Instruction__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getInstructionAccess().getLeftCurlyBracketKeyword_2()); }
)

	rule__Instruction__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getTypeAssignment_3()); }
(rule__Instruction__TypeAssignment_3)
{ after(grammarAccess.getInstructionAccess().getTypeAssignment_3()); }
)

	rule__Instruction__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getCodingAssignment_4()); }
(rule__Instruction__CodingAssignment_4)
{ after(grammarAccess.getInstructionAccess().getCodingAssignment_4()); }
)

	rule__Instruction__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getBehaviorAssignment_5()); }
(rule__Instruction__BehaviorAssignment_5)
{ after(grammarAccess.getInstructionAccess().getBehaviorAssignment_5()); }
)

	rule__Instruction__Group__6
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getInstructionAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__InstType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstTypeAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getInstTypeAccess().getTypeKeyword_0()); }
)

	rule__InstType__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__InstType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstTypeAccess().getInstTypeLabelTerminalRuleCall_1()); }
	RULE_INSTTYPELABEL
{ after(grammarAccess.getInstTypeAccess().getInstTypeLabelTerminalRuleCall_1()); }
)

	rule__InstType__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__InstType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstTypeAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getInstTypeAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Coding__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodingAccess().getCodingKeyword_0()); }

	'coding' 

{ after(grammarAccess.getCodingAccess().getCodingKeyword_0()); }
)

	rule__Coding__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Coding__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodingAccess().getBinaryAssignment_1()); }
(rule__Coding__BinaryAssignment_1)
{ after(grammarAccess.getCodingAccess().getBinaryAssignment_1()); }
)

	rule__Coding__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Coding__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodingAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getCodingAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Behavior__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getBehaviorKeyword_0()); }

	'behavior' 

{ after(grammarAccess.getBehaviorAccess().getBehaviorKeyword_0()); }
)

	rule__Behavior__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBehaviorAccess().getLeftCurlyBracketKeyword_1()); }
)

	rule__Behavior__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getGroup_2()); }
(rule__Behavior__Group_2__0)*
{ after(grammarAccess.getBehaviorAccess().getGroup_2()); }
)

	rule__Behavior__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBehaviorAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Behavior__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getAlternatives_2_0()); }
(rule__Behavior__Alternatives_2_0)
{ after(grammarAccess.getBehaviorAccess().getAlternatives_2_0()); }
)

	rule__Behavior__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getSemicolonKeyword_2_1()); }

	';' 

{ after(grammarAccess.getBehaviorAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLexpAssignment_0()); }
(rule__Expression__LexpAssignment_0)
{ after(grammarAccess.getExpressionAccess().getLexpAssignment_0()); }
)

	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getExpressionAccess().getEqualsSignKeyword_1()); }
)

	rule__Expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRexpAssignment_2()); }
(rule__Expression__RexpAssignment_2)
{ after(grammarAccess.getExpressionAccess().getRexpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRExpAccess().getArgsAssignment_0()); }
(rule__RExp__ArgsAssignment_0)
{ after(grammarAccess.getRExpAccess().getArgsAssignment_0()); }
)

	rule__RExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRExpAccess().getGroup_1()); }
(rule__RExp__Group_1__0)*
{ after(grammarAccess.getRExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRExpAccess().getAopsAssignment_1_0()); }
(rule__RExp__AopsAssignment_1_0)
{ after(grammarAccess.getRExpAccess().getAopsAssignment_1_0()); }
)

	rule__RExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRExpAccess().getArgsAssignment_1_1()); }
(rule__RExp__ArgsAssignment_1_1)
{ after(grammarAccess.getRExpAccess().getArgsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getConditionAccess().getIfKeyword_0()); }
)

	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getConditionAccess().getLeftParenthesisKeyword_1()); }
)

	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getLargAssignment_2()); }
(rule__Condition__LargAssignment_2)
{ after(grammarAccess.getConditionAccess().getLargAssignment_2()); }
)

	rule__Condition__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCmpopAssignment_3()); }
(rule__Condition__CmpopAssignment_3)
{ after(grammarAccess.getConditionAccess().getCmpopAssignment_3()); }
)

	rule__Condition__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getRargAssignment_4()); }
(rule__Condition__RargAssignment_4)
{ after(grammarAccess.getConditionAccess().getRargAssignment_4()); }
)

	rule__Condition__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getConditionAccess().getCommaKeyword_5()); }
)

	rule__Condition__Group__6
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getThentargetAssignment_6()); }
(rule__Condition__ThentargetAssignment_6)
{ after(grammarAccess.getConditionAccess().getThentargetAssignment_6()); }
)

	rule__Condition__Group__7
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCommaKeyword_7()); }

	',' 

{ after(grammarAccess.getConditionAccess().getCommaKeyword_7()); }
)

	rule__Condition__Group__8
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getElsetargetAssignment_8()); }
(rule__Condition__ElsetargetAssignment_8)
{ after(grammarAccess.getConditionAccess().getElsetargetAssignment_8()); }
)

	rule__Condition__Group__9
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getRightParenthesisKeyword_9()); }

	')' 

{ after(grammarAccess.getConditionAccess().getRightParenthesisKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__REGS__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREGSAccess().getRegsKeyword_0_0()); }

	'regs' 

{ after(grammarAccess.getREGSAccess().getRegsKeyword_0_0()); }
)

	rule__REGS__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__REGS__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREGSAccess().getLeftSquareBracketKeyword_0_1()); }

	'[' 

{ after(grammarAccess.getREGSAccess().getLeftSquareBracketKeyword_0_1()); }
)

	rule__REGS__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__REGS__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREGSAccess().getARGSTerminalRuleCall_0_2()); }
	RULE_ARGS
{ after(grammarAccess.getREGSAccess().getARGSTerminalRuleCall_0_2()); }
)

	rule__REGS__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}


rule__REGS__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREGSAccess().getRightSquareBracketKeyword_0_3()); }

	']' 

{ after(grammarAccess.getREGSAccess().getRightSquareBracketKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Model__InstructionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getInstructionsInstructionParserRuleCall_0()); }
	ruleInstruction{ after(grammarAccess.getModelAccess().getInstructionsInstructionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getInstructionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getTypeInstTypeParserRuleCall_3_0()); }
	ruleInstType{ after(grammarAccess.getInstructionAccess().getTypeInstTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__CodingAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getCodingCodingParserRuleCall_4_0()); }
	ruleCoding{ after(grammarAccess.getInstructionAccess().getCodingCodingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__BehaviorAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getBehaviorBehaviorParserRuleCall_5_0()); }
	ruleBehavior{ after(grammarAccess.getInstructionAccess().getBehaviorBehaviorParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Coding__BinaryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodingAccess().getBinaryBinaryTerminalRuleCall_1_0()); }
	RULE_BINARY{ after(grammarAccess.getCodingAccess().getBinaryBinaryTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__ExpressionsAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getExpressionsExpressionParserRuleCall_2_0_0_0()); }
	ruleExpression{ after(grammarAccess.getBehaviorAccess().getExpressionsExpressionParserRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__ConditionsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getConditionsConditionParserRuleCall_2_0_1_0()); }
	ruleCondition{ after(grammarAccess.getBehaviorAccess().getConditionsConditionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LexpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLexpLExpParserRuleCall_0_0()); }
	ruleLExp{ after(grammarAccess.getExpressionAccess().getLexpLExpParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RexpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRexpRExpParserRuleCall_2_0()); }
	ruleRExp{ after(grammarAccess.getExpressionAccess().getRexpRExpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RExp__ArgsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRExpAccess().getArgsREGSARGSParserRuleCall_0_0()); }
	ruleREGSARGS{ after(grammarAccess.getRExpAccess().getArgsREGSARGSParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RExp__AopsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRExpAccess().getAopsAOPsTerminalRuleCall_1_0_0()); }
	RULE_AOPS{ after(grammarAccess.getRExpAccess().getAopsAOPsTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RExp__ArgsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRExpAccess().getArgsREGSARGSParserRuleCall_1_1_0()); }
	ruleREGSARGS{ after(grammarAccess.getRExpAccess().getArgsREGSARGSParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__LargAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getLargREGSARGSParserRuleCall_2_0()); }
	ruleREGSARGS{ after(grammarAccess.getConditionAccess().getLargREGSARGSParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__CmpopAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCmpopCMPOPsTerminalRuleCall_3_0()); }
	RULE_CMPOPS{ after(grammarAccess.getConditionAccess().getCmpopCMPOPsTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__RargAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getRargREGSARGSParserRuleCall_4_0()); }
	ruleREGSARGS{ after(grammarAccess.getConditionAccess().getRargREGSARGSParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ThentargetAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getThentargetJMPTARGETParserRuleCall_6_0()); }
	ruleJMPTARGET{ after(grammarAccess.getConditionAccess().getThentargetJMPTARGETParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ElsetargetAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getElsetargetJMPTARGETParserRuleCall_8_0()); }
	ruleJMPTARGET{ after(grammarAccess.getConditionAccess().getElsetargetJMPTARGETParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ARGS : ('arg1'|'arg2'|'arg3');

RULE_AOPS : ('+'|'-'|'*'|'/');

RULE_CMPOPS : ('=='|'!='|'<'|'>'|'<='|'>=');

RULE_INSTTYPELABEL : ('arithmetic'|'loadstore'|'branch');

RULE_BINARY : '0x' ('0'..'9'|'A'..'F')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


