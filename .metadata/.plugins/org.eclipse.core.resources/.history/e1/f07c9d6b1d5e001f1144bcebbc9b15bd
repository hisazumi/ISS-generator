«IMPORT mcore»;

«DEFINE main FOR Model»
«FILE "isa.cpp"»
#include "core.h"

«EXPAND emit_ast FOREACH this.instructions»

void decode (int pc, int inst) {
        switch (OP(inst)) {
                «EXPAND decode FOREACH this.instructions»
                case 0:
                	builder.CreateRetVoid ();
		  			break;
		  			
		  		default:
		  			printf ("unsupported instruction ");
		  			break;
        }
}
«ENDFILE»
«ENDDEFINE»

«REM»デコーダ«ENDREM»
«DEFINE decode FOR Instruction»
                case «this.coding.coding»: /* «this.name» */
                        «this.name»_emit (pc, inst);                
                        break;
«ENDDEFINE»

«REM»AST生成«ENDREM»
«DEFINE emit_ast FOR Instruction»
void «this.name»_emit (int pc, int inst) 
{
	«EXPAND expression FOREACH this.behavior.expressions»
	
	«IF !this.behavior.conditions.isEmpty»
		«EXPAND condition FOREACH this.behavior.conditions»
	«ELSE»
		builder.CreateBr (basic_blocks.at (pc+1));
	«ENDIF»
}
«ENDDEFINE»

«DEFINE expression FOR Expression»
	builder.CreateStore (
	«IF this.rexp.arg != null»
		«EXPAND regargs FOR this.rexp.arg»
	«ELSEIF this.rexp.aop.compareTo("+")==0»
		builder.CreateAdd(
        	«EXPAND regargs FOR this.rexp.larg»,
        	«EXPAND regargs FOR this.rexp.rarg»)
	«ENDIF»
	,
	ir_reg («this.lexp.reg.arg»(inst))
	);
«ENDDEFINE»

«REM»まるでだめ«ENDREM»
«DEFINE condition FOR Condition»
	«IF this.cmpop.compareTo("!=") == 0»
		builder.CreateCondBr (
			builder.CreateICmpNE («EXPAND regargs FOR this.larg»,
						          «EXPAND regargs FOR this.rarg»),
			basic_blocks.at (IM(inst)),
			basic_blocks.at (pc+1));
	«ELSEIF this.cmpop.compareTo("==") == 0»
	«ENDIF»
«ENDDEFINE»

«DEFINE regargs FOR REGSARGS»
	«IF this.reg != null»
		«REM»Register Loading«ENDREM»
		«IF this.reg.arg.compareTo("") == 0»
			pc
		«ELSE» 
			ir_reg_load («this.reg.arg»(inst))
		«ENDIF»
	«ELSE»
		ConstantInt::get(Type::getInt32Ty(context), IM(inst))
	«ENDIF»
«ENDDEFINE»


